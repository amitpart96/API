openapi: 3.0.0
info:
  title: Simple Inventory API
  description: This is a simple API
  contact:
    email: you@your-company.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
- url: https://virtserver.swaggerhub.com/amitpart96/food-API/1.0.0
  description: SwaggerHub API Auto Mocking
tags:
- name: users
  description: Registered users
- name: recipes
  description: Recipes stored in the system
paths:
  /user/register:
    post:
      tags:
      - users
      summary: A new user from the client is added to the server.
      description: A JSON object contains all the details about the new user.
      requestBody:
        description: user to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "201":
          description: A new user has been added
        "400":
          description: wrong input parameters
        "401":
          description: Username already exists.
  /user/login:
    post:
      tags:
      - users
      summary: logs user into the system.
      description: A JSON object contains username and password for verification.
      requestBody:
        description: user verification
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/login'
        required: true
      responses:
        "200":
          description: Successful operation
        "400":
          description: Invalid username/password
  /recipes/randomRecipes:
    get:
      tags:
      - recipes
      summary: get 3 random recipes from the server.
      responses:
        "200":
          description: The 3 random recipes.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/recipe_header'
        "400":
          description: No recipes found
        "201":
          description: 3 random recipes.
  /user/lastViewRecipes{username}:
    get:
      tags:
      - users
      summary: Get 3 last view recipes by user from the server.
      description: Get from the client a username and returns 3 last view recipes
        by user.
      parameters:
      - name: username
        in: path
        description: The user name
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "201":
          description: The 3 last view recieps by user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/recipe_header'
        "404":
          description: User not found
        "401":
          description: No last viewed recipes.
  /recipes/getRecipe{id}:
    get:
      tags:
      - recipes
      summary: Get recipe's data from the server.
      description: Get from the client a recipe's id and returns recipe's data.
      parameters:
      - name: id
        in: path
        description: The recipe id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: The recipe's data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/recipe'
        "404":
          description: Recipe not found
  /recipes/search:
    get:
      tags:
      - recipes
      summary: Get recipe's that match the search query from the server
      description: Get from the client a query with all the details
      parameters:
      - name: name
        in: query
        description: The recipe name
        required: true
        style: form
        explode: true
      - name: count
        in: query
        description: The amount of results to retrive from the server
        required: false
        style: form
        explode: true
      - name: Diet
        in: query
        description: Spiceal diet recipes
        required: false
        style: form
        explode: true
      - name: Cuisines
        in: query
        description: the origin of the recipe
        required: false
        style: form
        explode: true
      - name: Intolerances
        in: query
        description: the user will spacify any intolerances so his recipes will not
          have it.
        required: false
        style: form
        explode: true
      responses:
        "200":
          description: The recipe's data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/recipe_header'
        "201":
          description: The recipe's data - less then the chosen amoune
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/recipe_header'
        "404":
          description: No results for given query
  /user/getFavorites{id}:
    get:
      tags:
      - users
      summary: Get user's favorites recipes data from the server.
      description: Get from the client a user id and returns user's favorites recipes
        data
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "201":
          description: The user's favorites recipes data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/recipe_header'
        "404":
          description: user not found
  /user/addToFav{recipeID}:
    put:
      tags:
      - users
      summary: Updated user favorite recipes
      description: This can only be done by the logged in user.
      parameters:
      - name: recipeID
        in: path
        description: name of the recipe need to be added to user favorite recipes
          array
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: Recipe added to user favorites
        "400":
          description: Invalid recipe id supplied
  /recipe/AddRecipe:
    post:
      tags:
      - recipes
      summary: Adding a new recipe by registered user to the server.
      description: A JSON object contains all the details about the new recipe.
      requestBody:
        description: recipe to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/recipe'
        required: true
      responses:
        "201":
          description: A new recipe has been created and saved
        "400":
          description: Wrong input parameters
        "401":
          description: recipe name already exist
  /user/getUserRecipes{id}:
    get:
      tags:
      - users
      summary: Get user's recipes data from the server.
      description: Get from the client a user id and returns user's recipes data (owner).
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "201":
          description: The user's owner recipes data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/recipe_header'
        "404":
          description: user not found
  /recipe/getfamilyRecipes:
    get:
      tags:
      - recipes
      summary: Get family recipes data from the server.
      description: Get from the client a request and returns family recipes data.
      responses:
        "200":
          description: The family recipes data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/recipe'
components:
  schemas:
    User:
      type: object
      properties:
        username:
          maxLength: 8
          minLength: 3
          type: string
          description: username contains between 3 to 8 letters only
          example: omeradam
        firstName:
          type: string
          description: user's first name
          example: Omer
        lastName:
          type: string
          description: user's last name
          example: Adam
        country:
          type: string
          description: user's country
          example: Israel
        password:
          maxLength: 10
          minLength: 5
          type: string
          description: "password contains between 5 to 10 chars, at least one of them\
            \ is a number and a special char"
          format: password
          example: oa123!
        email:
          type: string
          description: user's email
          format: email
          example: a@gmail.com
        favorites:
          type: array
          description: user's favorite recipes
          example:
          - 10
          - 18
          items:
            type: string
            description: recipe id
            example: "10"
        myrecipes:
          type: array
          description: holds the recipes id that the user created
          example:
          - 1
          - 28
          items:
            type: string
            description: recipe id
            example: "1"
    login:
      type: object
      properties:
        username:
          type: string
          example: omeradam
        password:
          type: string
          format: password
          example: oa123!
    recipe:
      type: object
      properties:
        name:
          type: string
          example: Strawberry cake
        owner:
          type: string
          description: recipe owner (username)
          example: omeradam
        picture:
          type: string
          format: URL
        time:
          type: number
          description: Preparation time in minutes.
          example: 60
        vegetarian:
          type: boolean
          description: Is vegetarian? (1=yes 0=no)
          example: false
        vegan:
          type: boolean
          description: Is vegan? (1=yes 0=no)
          example: false
        gluten free:
          type: boolean
          description: Is gluten free? (1=yes 0=no)
          example: false
        ingredients:
          type: array
          items:
            $ref: '#/components/schemas/recipe_ingredients'
        instructions:
          type: string
          description: Instructions for preparing the dish.
          example: 1.Mix all the ingredients in a bowl. 2. Put in a mold. 3.Put in
            the oven at 180 degrees for 20 minutes.
        Number of servings:
          type: number
          example: 3
    recipe_header:
      type: object
      properties:
        name:
          type: string
          example: Strawberry cake
        picture:
          type: string
          format: URL
        time:
          type: number
          description: Preparation time in minutes.
          example: 60
        vegetarian:
          type: boolean
          description: Is vegetarian? (1=yes 0=no)
          example: false
        vegan:
          type: boolean
          description: Is vegan? (1=yes 0=no)
          example: false
        gluten free:
          type: boolean
          description: Is gluten free? (1=yes 0=no)
          example: false
        likes:
          type: number
          description: Number of likes the recipe recived from users
          example: 500
    recipe_ingredients:
      type: object
      properties:
        Ingredient:
          type: string
          description: Ingredient name
          example: Strawberry
        Quantity:
          type: number
          example: 10
        Unit of measure:
          type: string
          description: "Unit of measure (kg,cups,Spoon,unit...)"
          example: unit
      example: null
